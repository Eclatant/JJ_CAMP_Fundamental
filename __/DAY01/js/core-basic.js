// 엄격 모드 발동!!!
'use strict';

/**
 * --------------------------------
 * JavaScript Core
 * --------------------------------
 * 절차 방식으로 학습
 * 기초 문법부터 차근차근
 * 복습! 복습! 복습!
 * ----------------------------- */

// 실행 구문 1
// 초기 변수 선언
// 방법 1.
var x, y, z;
// 방법 2.
// var x;
// var y;
// var z;

// 선언된 변수에 값을 할당(대입)
// 변수 x 에 숫자 10 상수 값을 대입
x = 10;
// 방법 3.
// var x = 10;
// 변수 y의 연산 결과는
// 변수 x에 숫자 10을 더한 값이다.
y = x + 10; // 20
// var y = x + 10; // 20

// 변수 z에 변수 y를 활용한 수식 적용
z = y * y - 100;
// var z = y * y - 100;

// 콘솔(console)에 기록(log)하고 싶다.
console.log('x:', x); // x = 10
console.log('y:', y); // y = 20
console.log('z:', z); // z = 300

// --------------------------------

// 실행 구문 2

// 변수의 상태가 변경되었다.
x = -19;

y = x + 10; // ????

console.log('x:', x); // x = -19
console.log('y:', y); // y = -19 + 10 = -9
console.log('z:', z); // z = ????

// --------------------------------

// var 키워드를 한번만 사용하는 코딩 패턴(방법)
// var singleton pattern
var a = 1, b = 2, c = 9;
// a = 1;
// b = 2;
// c = 9;

var man    = '남자',
    woman  = '여자',
    people = '사람들';
// man   = '남자';
// woman = '여자';
// people= '사람들';

// --------------------------------

// 변수 이름 작성 규칙

// 규칙 1.
// 이름 맨 앞에 숫자가 오면 안된다.
// var 9tree; //오류 발생
// 하지만 맨 앞만 아니면 괜찮다.
var t9;
// 규칙 2.
//  이름 사이에 공백(띄어쓰기)은 허용하지 않는다.
// var my name; // 오류 발생
//  이름 사이는 공백 대신에 밑줄을 사용한다.
var my_name;
// 규칙 3.
// 이름 작성 시, 특수문자는 $, _ 만 허용
// var ^^#@_name;
// 규칙 4.
// 변수 이름은 모두 대문자를 사용해서 작성하지 않는다.
// 오류가 발생하는 것은 아니지만...
// 관례적으로 이름이 모두 대문자일 경우, 상수로 인식한다.
// var SMART_PHONE;

// 위 변수는 변수(변하는 수)가 아닌 상수를
// 나타내는 식별법이다.
// const STORAGE;

// 고로 대문자를 변수 이름에 사용하는 경우는
// 카멜 케이스(camelCase) 표기법을 따르는 경우가 많다.
var smartPhone;

// 웹 브라우저에 경고 창을 띄운다.
// 오늘날 자주 사용되지 않는다.
// console.log()가 자주 사용됨.
// window.alert('javascript 코드 실행');

// --------------------------------
// 자바스크립트 문장은 점으로 연결되어 이루어진다.

// 친구가 커피를 선물하다.
// 친구.선물하다(커피);
// 오브젝트.메서드(아규먼트);
// 객체.동작(전달인자);